プログラムを書いているとき, デバッグしているとき, そこで起っていることを本当に認識して
いるだろうか. 少なくとも私はしていない.

バスタブの, つかるには熱いお湯を水でちょうどいい具合にしているときそのメカニズムを本当に理解
しているだろうか. そんな人はいないだろう.

天気予報が雨だったら単純に洗濯物を外に干すのをやめて出かけるときに傘を持っていくわけで,
なぜ雨予報になったのか大気の状態を検証して, 予報が的中する確率を試算する人もいない.

そうする必要がなければやらないし, 必要になったときに改めて考えるわけだ. 私は
「熟練したプログラマはそのプログラムが動くメカニズムをよく理解していて」などと書いたが
それはもやはり必要になったときにそうしているわけで

  struct S* ps = ...

  ps->func(123);

のようなコードがあったとき,「えーとこれはこのプロセッサのあれとあれの命令に変換されて
実行されるんだったよな」などと誰も考えないし, デバッグしているときですらその段階まで
考えることは稀である. そしてだからこそ熟練したプログラマは必要に応じて調べることを
変えるわけだ. だが熟練したプログラマもプロセッサの命令が正しく動作していなければ
混乱するだろう. そういう意味では厳密にメカニズムを理解しているとは言えないかもしれない.

ともあれ熟練したプログラマはメカニズムをいくつかのレベルで単純化していて, 単純化が機能する
場面ではあえて詳細なレベルで考えたり調べたりすることはない. 単純化は考えることを放棄してい
るのではなくて, むしろ考え方を整理しているとも言える.

バスタブのお湯はどうだろう. お湯の温度がどのように変化していくのか検証するために水分子の
運動方程式を解く必要があるだろうか. 正直私にはこのレベルでものを考えたことはないし
そういう能力もない. もう少し単純化して「50 度のお湯 500 リットルに 20 度の水を
何リットル入れればお湯の温度は 40 度になるか. 室温は 24 度とする.」のような問題であれば
水分子の運動方程式を解く必要はないだろう. 少々荒いかもしれないが単純化できている.

では雨についてはどうか. これも私にはやはりよく分かっていない. 空気中の水分が冷やされて
それが雨という形になって地上に降る, といったレベルである. この例では単純化はバスタブのお湯
よりも簡単ではなくなっているということは言える. しかしだからといって, やはり水分子の運動方
程式を解く必要はなさそうである.

単なる物理現象でも単純化は難しかったりするが, 本当にそこで起っていることを
理解することが重要であったり必ずしもそうでなかったりする. バスタブのお湯も雨も, 水分子の
運動方程式を解こうとしたところで正解にたどり着ける可能性は低くなる. プログラムの
デバッグも, この IC チップのあそこの回路が機能してそこで自分のプログラムが動いたり
しなかったりしている, などとは考えないのだ.

さて問題なのは物理現象ではない「植物」「動物」で述べたようなことを単純化できるかどうかである.
単純化できないのに単純化することは, 考え方の整理ではなく, もはや考えることの放棄となる.
しかし正解か不正解かとは問題が別なのだ.

植物が育つメカニズムの単純化をできない人でもおいしいお米を育てることはできる. もしかすると
農家の方はメカニズムの単純化を無意識に, あるいは意図的行なっているかもしれないし, そうでは
なくて経験的に知っているだけかもしれない. 後者のほうがそれっぽい.

犬や猫の行動のメカニズムを単純化することはできるだろうか. できなくてもトレーニング方法を
試行錯誤で探すことはできる. もともと犬や猫の行動を制限しようとする考え方がそもそも傲慢なのだ.
いや話がそれた. 単純化することができないから謙虚に動物に寄り添ってできるようになるように
一緒に努めるわけだ. 無駄吠えをなくすための首輪は考えることの放棄かもしれないが同時にそれは正解
かもしれない. 少なくとも私は賛成できないが, 飼主が怒りを犬に向けることはなくなる.

子供のしつけがエスカレートして虐待に発展するケースはどうか. これはむしろメカニズムやその単純化
を考えたいのは子供の行動ではなくて親のほうである. ともあれ単純化は難しい.

話ががらりと変わるが, 人口知能をどうやって実現するかという問題がある. 仮に「脳細胞 1 つ 1 つの
シミュレーションと近いことをやってみたらどうか」というアイディアは多分自分が生きている
間には少なくとも実現できないだろうなと思う. そういうアプローチは興味深くもある一方, 
例えば, ある二人零和有限確定完全情報ゲームに特化した次の手を計算するようなプログラムは
どうかといった研究も行なわれている. ゲームに特化していない分野もあるがここでは割愛する.
それらのプログラムは当然ながら人間が考えるようなアルゴリズムを搭載しているわけでは
必ずしもない. 例えば将棋のプログラムであるが, そこそこ強い最初の将棋のプログラムは
将棋が全然強くない人が開発したわけだ. そのプログラムは将棋を指す人の考え方を真似たわ
けではない. だが単純化が限定された状況で成功している例と考えられる.
