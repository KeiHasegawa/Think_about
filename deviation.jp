高度な数学が必要とされたピラミッドの建設の時代 0 はまだ発見されていなかったらしい.
インターネットを検索すればあなたも 0 の発見について知ることができるだろう.

しかし現在では小学 1 年生の生徒に

1 + 0 = 1

のような計算ドリルがあるかもしれない. 必ず正解できる問題もそれはそれでよいのだ.
とはいえ 0 を発見するまでには段階があったわけだ.
小学 1 年生に「任意の x に対して x + 0 = x が成立する」などと言っても「任意って何」
「x って何」と質問されるか, あるいは途方にくれてしまう. だから

0 をたしてもかわらないよ

と言えばよい. そんなことは改めて言うまでもないことだが, しかし一方で「アルキメデス」
の話もある. 脱線しそうなのでそれは自分で調べて下さい.

「任意の」とか x とかは持ち出さなくても等価なことは伝えられているし, そのほうが聞き手にとって
は明快な場合がある. 小学 1 年生に足し算と引き算は教えても 3 桁の掛け算をやらせる先生はいない.
ましてや鶴亀算とか台形の面積の算出をさせる先生もいないだろう.

「単純化」では熱すぎるお湯を水で埋めるのに

「50 度のお湯 500 リットルに 20 度の水を何リットル入れればお湯の温度は 40 度になるか.
室温は 24 度とする.」

のように単純化したが, 数学や物理が得意な方は, これが水温, 室温と時間に関する微分方程式を解く
ことがより精度の高い, そして本質をより表していると考えるわけで, まずは「問題に時間の設定がない」
と指摘し, 最後には「これは問題として不完全で, 例えば室内がどれほどの広さなのか不明である. 他
にも現在の湿度が不明...」などと言うわけだ. ちなみに私はこの問題の微分方程式を書けないし, 書
けたとしても解けないだろう. いや, 誰かが微分方程式を書いてくれれば解く方はできるかもしれない.
実は難易度は前者の方が高い.

やはり大事なことだが水分子の運動方程式は必要ないのだ. それは運動方程式でもあり
微分方程式でもあるが, それを考えること自体問題を整理できないと思っていいだろう.

プログラムをデバッグしているとき, 簡単に確認できる事実を積み上げていってみてはどうだろう.
それができていないときは整理して考えられていないことが多い.

小学 1 年生に

足し算
引き算
九九
2 桁と 1 桁の掛け算
2 桁同士の掛け算
割り算
余りのある割り算
小数点の掛け算
小数点の割り算
...

のように段階をつけて覚えてもらうのは当然で, この次にいきなり微分方程式が出てきたら,
普通の生徒は困惑するし絶望するかもしれない.
生徒は学びながら問題に対して正解すると評価されることを知るのだが実はこれがよくない
ことがあったりする. とはいえ, 正解できるように教育しているのもまた事実である.

プログラマの中には超能力者と感嘆の評価を受けたり, 場合によっては揶揄されてしまう方がいる.
何らかのソフトウェアのバグや期待通り動作しない現象を見てずばりと原因を推測するのだ.
推測なので的外れなこともあるが, その人の経験したことで稀に正解だったりする.

このようなアドバイスを受けた人は大抵困っていることが多くそれにとびつきたくなるかも
しれない. そして試してみて正解したら喜ぶだろうし,「超能力者」を尊敬して崇拝することもある.
不正解であれば別のアドバイスをくれる人を探すか, あるいは自力で何とかするか, 最後には諦めるか,
あるいは正解にたどり着くかだ. 私は「超能力者」のアドバイスが駄目だと言っているのではない.
「超能力者」は困っている人を救おうとしているし, 場合によっては自分の知識をひけらかして
いるわけだ. そいういう意味では私も同じ種類の人間である.

ともあれ, 状況を整理すると

o 正解することが良しとされている

o 簡単に正解にたどり着ける方法がある

とすれば何も苦労する必要はないと考えるのが普通なのだが, 正解にたどり着ける方法が
実は間違えだったりした場合に何が起こるかなのだ.

「熟練したプログラマはそのプログラムが動くメカニズムを...他方, そうでないプログラマは
メカニズムはぼんやりとしか理解していないので試行錯誤の上正解にたどり着くし, ...」

のように述べたがプログラマは熟練するために何回かは試行錯誤するはずである. その過程で
このように正解にたどり着く方法を学ぶのだが, そこに論理の逸脱が発生する場合がある. ざっくり
というならまぐれだ.

簡単な事実を地道に積み上げて最後には正解にたどり着いた場合, そのプログラマは自分を「超能力者」
とは考えない. だから当然ながら正解にたどり着かないこともある. しかし, 簡単な事実が何が原因で
積み上げることができなくなったかを考えることはできるはずである. そこには論理の逸脱がないからだ.
そして「超能力者」ではないそのプログラマはできない原因が, 知識の不足によるものなのか, 自分の
考え方が間違っているのかをおそらく考えるまでもなく知っている. そのときは正解できなくても,
何を変えれば, あるいは, 何が変われば正解にたどり着けるかを知っている. だからその場は
あっさりと諦めて次回の機会に向かうのである.

「正解か不正解かとは問題が別なのだ.」

